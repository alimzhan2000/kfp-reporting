import os
import csv
import pandas as pd  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
from django.core.files.storage import default_storage
from django.utils import timezone
from django.db import transaction
from .models import DataUpload
from reports.models import AgriculturalData


class DataProcessingService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    
    REQUIRED_COLUMNS = [
        '–ü–æ–ª–µ', '–ì–æ–¥', '–ü–ª–æ—â–∞–¥—å –ø–æ—Å–µ–≤–∞', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å, —Ü/–≥–∞', 
        '–°–æ—Ä—Ç', '–ö–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç'
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    OPTIONAL_COLUMNS = [
        '–ë—Ä–∏–≥–∞–¥–∞', '–ü–æ–ª–µ (—Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)', '–í–∞–ª–æ–≤—ã–π —Å–±–æ—Ä, —Ç–Ω',
        '–†–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è', '–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–ë–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        '–ê–≥—Ä–æ—Ñ–æ–Ω', '–ü–ó–†'
    ]
    
    @classmethod
    def process_file(cls, upload_instance, file_path):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        try:
            print(f"üîß Processing file: {file_path}")
            upload_instance.status = 'processing'
            upload_instance.save()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if file_path.endswith('.csv'):
                print("üìÑ Reading CSV file...")
                df = cls._read_csv_with_quotes(file_path)
            elif file_path.endswith(('.xlsx', '.xls')):
                print("üìä Reading Excel file...")
                try:
                    df = cls._read_excel_with_header_detection(file_path)
                except Exception as e:
                    print(f"‚ö†Ô∏è Header detection failed, trying simple read: {e}")
                    # Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —á—Ç–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    df = cls._read_excel_simple_fallback(file_path)
            else:
                raise ValueError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞')
            
            print(f"‚úÖ File read successfully. Shape: {df.shape}")
            print(f"üìã Columns: {list(df.columns)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            missing_columns = [col for col in cls.REQUIRED_COLUMNS if col not in df.columns]
            if missing_columns:
                raise ValueError(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {", ".join(missing_columns)}')
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
            required_for_validation = ['–ü–æ–ª–µ', '–ì–æ–¥', '–ü–ª–æ—â–∞–¥—å –ø–æ—Å–µ–≤–∞', '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å, —Ü/–≥–∞', '–ö–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç']
            present = [c for c in required_for_validation if c in df.columns]
            df = df.dropna(subset=present)
            # –ù–µ —Å—É–∂–∞–µ–º –¥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–ø. –ø–æ–ª—è
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            df = cls._normalize_data(df)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
            records_created, records_updated = cls._save_to_database(df, None)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            upload_instance.records_processed = len(df)
            upload_instance.records_created = records_created
            upload_instance.records_updated = records_updated
            upload_instance.status = 'completed'
            upload_instance.completed_at = timezone.now()
            upload_instance.save()
            
            return True, f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π'
            
        except Exception as e:
            print(f"‚ùå Error processing file: {str(e)}")
            import traceback
            traceback.print_exc()
            
            upload_instance.status = 'failed'
            upload_instance.error_message = str(e)
            upload_instance.completed_at = timezone.now()
            upload_instance.save()
            return False, str(e)
    
    @classmethod
    def _read_csv_with_quotes(cls, file_path):
        """
        –ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—è –∫–∞–≤—ã—á–∫–∏ –∫ –∫–æ–ª–æ–Ω–∫–∞–º —Å –∑–∞–ø—è—Ç—ã–º–∏
        """
        import tempfile
        import os
        import re
        
        # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        with open(file_path, 'r', encoding='utf-8') as f:
            first_line = f.readline().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞–ø—è—Ç—ã–º–∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        columns_with_commas = [col for col in cls.REQUIRED_COLUMNS if ',' in col]
        
        if columns_with_commas:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            temp_file = tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.csv', encoding='utf-8')
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ —Å –∑–∞–ø—è—Ç—ã–º–∏
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç–∞—è, –∑–∞—Ç–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π, –∑–∞—Ç–µ–º –∑–∞–ø—è—Ç–∞—è –∏–ª–∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
                for col in columns_with_commas:
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏
                    escaped_col = re.escape(col)
                    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–ª–æ–Ω–∫—É –Ω–∞ –≤–µ—Ä—Å–∏—é –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                    pattern = r'(^|,)' + escaped_col + r'(,|$)'
                    replacement = r'\1"' + col + r'"\2'
                    first_line = re.sub(pattern, replacement, first_line)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                temp_file.write(first_line + '\n')
                
                # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                with open(file_path, 'r', encoding='utf-8') as original_file:
                    original_file.readline()  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
                    for line in original_file:
                        temp_file.write(line)
                
                temp_file.close()
                
                # –ß–∏—Ç–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                df = pd.read_csv(temp_file.name, encoding='utf-8')
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file.name)
                
                return df
                
            except Exception:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —á–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
                if os.path.exists(temp_file.name):
                    os.unlink(temp_file.name)
                return pd.read_csv(file_path, encoding='utf-8')
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ —Å –∑–∞–ø—è—Ç—ã–º–∏, —á–∏—Ç–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            return pd.read_csv(file_path, encoding='utf-8')
    
    @classmethod
    def _read_excel_with_header_detection(cls, file_path):
        """
        –ß–∏—Ç–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        """
        print(f"üîç Detecting headers in Excel file: {file_path}")
        
        # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        df_raw = pd.read_excel(file_path, header=None)
        print(f"üìä Raw file shape: {df_raw.shape}")
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        header_row = None
        print(f"üîé Searching for required columns: {cls.REQUIRED_COLUMNS}")
        
        for i in range(min(30, len(df_raw))):  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 30 —Å—Ç—Ä–æ–∫
            row_values = [str(val) for val in df_raw.iloc[i].values if val is not None and str(val).strip()]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if all(col in row_values for col in cls.REQUIRED_COLUMNS):
                header_row = i
                print(f"‚úÖ Found headers in row {i}: {row_values}")
                break
            elif row_values:  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                print(f"‚ùå Row {i}: {row_values[:5]}... (missing required columns)")
        
        if header_row is None:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
            try:
                return pd.read_excel(file_path)
            except Exception as e:
                # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                raise ValueError(f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–∞–π–ª–µ. –û—à–∏–±–∫–∞: {str(e)}')
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        try:
            df = pd.read_excel(file_path, header=header_row)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            df = df.dropna(how='all')
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è NaN
            df = df.dropna(how='all')
            
            return df
        except Exception as e:
            raise ValueError(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ {header_row}: {str(e)}')
    
    @classmethod
    def _read_excel_simple_fallback(cls, file_path):
        """
        –ü—Ä–æ—Å—Ç–æ–π fallback –º–µ—Ç–æ–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–æ–≤
        """
        print("üîÑ Trying simple Excel reading fallback...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for header_row in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
            try:
                print(f"üìä Trying header row {header_row}...")
                df = pd.read_excel(file_path, header=header_row)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                if any(col in df.columns for col in cls.REQUIRED_COLUMNS):
                    print(f"‚úÖ Success with header row {header_row}")
                    print(f"üìã Columns: {list(df.columns)}")
                    return df
                    
            except Exception as e:
                print(f"‚ùå Failed with header row {header_row}: {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
        print("üîÑ Trying standard Excel reading...")
        try:
            df = pd.read_excel(file_path)
            print(f"‚úÖ Standard reading successful")
            print(f"üìã Columns: {list(df.columns)}")
            return df
        except Exception as e:
            raise ValueError(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å Excel —Ñ–∞–π–ª: {str(e)}')
    
    @classmethod
    def _normalize_data(cls, df):
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º –¥–∞–Ω–Ω—ã—Ö
        df['–ì–æ–¥'] = pd.to_numeric(df['–ì–æ–¥'], errors='coerce')
        df['–ü–ª–æ—â–∞–¥—å –ø–æ—Å–µ–≤–∞'] = pd.to_numeric(df['–ü–ª–æ—â–∞–¥—å –ø–æ—Å–µ–≤–∞'], errors='coerce')
        df['–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å, —Ü/–≥–∞'] = pd.to_numeric(df['–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å, —Ü/–≥–∞'], errors='coerce')
        
        # –ù–µ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ü–µ–ª–∏–∫–æ–º: –¥–∞–ª—å–Ω–µ–π—à–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—è–º
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
        text_columns = ['–ü–æ–ª–µ', '–ö—É–ª—å—Ç—É—Ä–∞', '–°–æ—Ä—Ç', '–ö–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç']
        for col in text_columns:
            if col in df.columns:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –æ—á–∏—â–∞–µ–º
                df.loc[:, col] = df[col].apply(lambda x: str(x).strip() if x is not None and str(x) != 'nan' else '')
        
        return df
    
    @classmethod
    def _save_to_database(cls, df, uploaded_by):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        """
        records_created = 0
        records_updated = 0
        
        def safe_str(value):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É"""
            if value is None or pd.isna(value):
                return ''
            return str(value).strip()
        
        def safe_float(value):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
            try:
                if value is None or pd.isna(value):
                    return None
                return float(value)
            except (ValueError, TypeError):
                return None
        
        def safe_int(value):
            """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
            try:
                if value is None or pd.isna(value):
                    return None
                return int(float(value))  # –°–Ω–∞—á–∞–ª–∞ –≤ float, –ø–æ—Ç–æ–º –≤ int
            except (ValueError, TypeError):
                return None
        
        with transaction.atomic():
            for _, row in df.iterrows():
                try:
                    print(f"üîß Processing row: {row.get('–ü–æ–ª–µ', 'Unknown')} - {row.get('–ì–æ–¥', 'Unknown')}")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è–º–∏
                    defaults = {
                        'planting_area': safe_float(row['–ü–ª–æ—â–∞–¥—å –ø–æ—Å–µ–≤–∞']),
                        'yield_per_hectare': safe_float(row['–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å, —Ü/–≥–∞']),
                        'final_product': safe_str(row['–ö–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç']),
                        'uploaded_by': uploaded_by,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
                    if '–ë—Ä–∏–≥–∞–¥–∞' in df.columns:
                        brigade_val = safe_str(row['–ë—Ä–∏–≥–∞–¥–∞'])
                        if brigade_val:
                            defaults['brigade'] = brigade_val
                    
                    if '–ü–æ–ª–µ (—Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)' in df.columns:
                        field_old_val = safe_str(row['–ü–æ–ª–µ (—Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)'])
                        if field_old_val:
                            defaults['field_old_name'] = field_old_val
                    
                    if '–í–∞–ª–æ–≤—ã–π —Å–±–æ—Ä, —Ç–Ω' in df.columns:
                        gross_val = safe_str(row['–í–∞–ª–æ–≤—ã–π —Å–±–æ—Ä, —Ç–Ω'])
                        if gross_val:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–ª–æ–≤—ã–π —Å–±–æ—Ä (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "0 0" –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–º)
                            gross_harvest = gross_val.replace(' ', '').replace(',', '.')
                            if gross_harvest and gross_harvest != '00' and gross_harvest != '0':
                                float_val = safe_float(gross_harvest)
                                if float_val is not None:
                                    defaults['gross_harvest'] = float_val
                    
                    if '–†–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è' in df.columns:
                        repro_val = safe_str(row['–†–µ–ø—Ä–æ–¥—É–∫—Ü–∏—è'])
                        if repro_val:
                            defaults['reproduction'] = repro_val
                    
                    if '–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫' in df.columns:
                        pred_val = safe_str(row['–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫'])
                        if pred_val:
                            defaults['predecessor'] = pred_val
                    
                    if '–ë–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏' in df.columns:
                        score_val = safe_int(row['–ë–∞–ª–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'])
                        if score_val is not None:
                            defaults['productivity_score'] = score_val
                    
                    if '–ê–≥—Ä–æ—Ñ–æ–Ω' in df.columns:
                        agro_val = safe_str(row['–ê–≥—Ä–æ—Ñ–æ–Ω'])
                        if agro_val:
                            defaults['agro_background'] = agro_val
                    
                    if '–ü–ó–†' in df.columns:
                        pzr_val = safe_str(row['–ü–ó–†'])
                        if pzr_val:
                            defaults['pzr'] = pzr_val
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–ª—å—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –∫–∞–∫ –∫–ª—é—á
                    if '–ö—É–ª—å—Ç—É—Ä–∞' in df.columns:
                        crop_val = safe_str(row['–ö—É–ª—å—Ç—É—Ä–∞'])
                        defaults['crop'] = crop_val
                    else:
                        defaults['crop'] = ''

                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
                    field_name = safe_str(row['–ü–æ–ª–µ'])
                    year = safe_int(row['–ì–æ–¥'])
                    final_product = safe_str(row['–ö–æ–Ω–µ—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç'])
                    variety = safe_str(row['–°–æ—Ä—Ç'])
                    
                    if not field_name or not year or not final_product or not variety:
                        print(f"‚ö†Ô∏è Skipping row with missing required fields: field={field_name}, year={year}, product={final_product}, variety={variety}")
                        continue

                    print(f"üíæ Saving: {field_name}, {year}, {final_product}, {variety}")
                    
                    data, created = AgriculturalData.objects.update_or_create(
                        field_name=field_name,
                        year=year,
                        final_product=final_product,
                        variety=variety,
                        defaults=defaults
                    )
                    
                    if created:
                        records_created += 1
                        print(f"‚úÖ Created record #{records_created}")
                    else:
                        records_updated += 1
                        print(f"üîÑ Updated record #{records_updated}")
                        
                except Exception as e:
                    print(f"‚ùå Error processing row: {e}")
                    import traceback
                    traceback.print_exc()
                    continue
        
        print(f"üìä Summary: {records_created} created, {records_updated} updated")
        return records_created, records_updated

