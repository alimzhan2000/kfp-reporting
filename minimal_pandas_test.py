#!/usr/bin/env python
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç pandas
"""
import os
import django
from django.conf import settings

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kfp_reporting.settings')
django.setup()

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework import status
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator

@method_decorator(csrf_exempt, name='dispatch')
class MinimalPandasTestView(APIView):
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç pandas - —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç
    """
    parser_classes = (MultiPartParser, FormParser)
    permission_classes = []  # –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    def post(self, request, format=None):
        """
        –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ pandas
        """
        try:
            print("üß™ Minimal pandas test...")
            
            result = {
                'test_name': 'minimal_pandas_test',
                'tests': {}
            }
            
            # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç pandas
            try:
                print("üîç Test 1: Importing pandas...")
                import pandas as pd
                result['tests']['pandas_import'] = {
                    'success': True,
                    'pandas_version': pd.__version__
                }
                print(f"‚úÖ Pandas imported: {pd.__version__}")
            except Exception as e:
                result['tests']['pandas_import'] = {
                    'success': False,
                    'error': str(e)
                }
                print(f"‚ùå Pandas import failed: {e}")
                return Response(result, status=status.HTTP_200_OK)
            
            # –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç openpyxl
            try:
                print("üîç Test 2: Importing openpyxl...")
                import openpyxl
                result['tests']['openpyxl_import'] = {
                    'success': True,
                    'openpyxl_version': openpyxl.__version__
                }
                print(f"‚úÖ Openpyxl imported: {openpyxl.__version__}")
            except Exception as e:
                result['tests']['openpyxl_import'] = {
                    'success': False,
                    'error': str(e)
                }
                print(f"‚ùå Openpyxl import failed: {e}")
            
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ DataFrame
            try:
                print("üîç Test 3: Creating simple DataFrame...")
                df = pd.DataFrame({'test': [1, 2, 3]})
                result['tests']['dataframe_creation'] = {
                    'success': True,
                    'shape': df.shape,
                    'data': df.to_dict('records')
                }
                print(f"‚úÖ DataFrame created: {df.shape}")
            except Exception as e:
                result['tests']['dataframe_creation'] = {
                    'success': False,
                    'error': str(e)
                }
                print(f"‚ùå DataFrame creation failed: {e}")
            
            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
            try:
                print("üîç Test 4: Version compatibility check...")
                import sys
                result['tests']['version_check'] = {
                    'success': True,
                    'python_version': sys.version,
                    'pandas_version': pd.__version__,
                    'openpyxl_version': openpyxl.__version__ if 'openpyxl' in locals() else 'Not imported'
                }
                print(f"‚úÖ Version check completed")
            except Exception as e:
                result['tests']['version_check'] = {
                    'success': False,
                    'error': str(e)
                }
                print(f"‚ùå Version check failed: {e}")
            
            return Response(result, status=status.HTTP_200_OK)
            
        except Exception as e:
            print(f"‚ùå Minimal pandas test failed: {e}")
            import traceback
            traceback.print_exc()
            return Response(
                {'error': f'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç pandas –Ω–µ —É–¥–∞–ª—Å—è: {str(e)}'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
